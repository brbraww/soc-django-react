{"version":3,"sources":["logo.svg","components/Header/Header.module.css","components/Posts/Post/Post.js","api/posts_api.js","components/Posts/Posts.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ActionBtn","props","post","action","useState","likes","setLikes","userLike","setUserLike","className","actionDisplay","display","type","onClick","event","preventDefault","Post","id","content","axios","baseURL","PostsComponent","textAreaRef","React","createRef","newPosts","setNewPosts","onSubmit","newVal","current","value","tempNewPosts","unshift","ref","required","name","rows","Posts","postsInit","setPostsInit","posts","setPosts","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadPosts","alert","map","item","index","key","Header","styles","logo","src","alt","App","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","postsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ea56e6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3fMln\"};","import React, {useState} from \"react\";\r\n\r\nconst ActionBtn = (props) => {\r\n    const {post, action} = props\r\n    const [likes, setLikes] = useState(post.likes ? post.likes : 0)\r\n    const [userLike, setUserLike] = useState(post.userLike ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes-1)\r\n                setUserLike(false)\r\n            } else {\r\n                setUserLike(true)\r\n                setLikes(post.likes+1)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${action.display}` : actionDisplay\r\n    return <button onClick={handleClick} className={className}>{display}</button>\r\n}\r\n\r\nconst Post = (props) => {\r\n    const {post} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return (\r\n        <div className= {className} id={post.id}>\r\n                <div className='content'>\r\n                    {post.id} - {post.content}\r\n                </div>\r\n                <div className='btn btn-group'>\r\n                    <ActionBtn post={post} action={{type:'like', display: 'Like'}}/>\r\n                    <ActionBtn post={post} action={{type:'unlike', display: 'Unlike'}}/>\r\n                    <ActionBtn post={post} action={{type:'repost', display: 'Share'}}/>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import * as axios from 'axios';\r\n\r\nconst baseURL = 'http://localhost:8000/api/'\r\n\r\nconst instance = axios.create({\r\n    //withCredentials,\r\n    baseURL,\r\n})\r\n\r\nexport const postAPI = {\r\n    getPostList() {\r\n        return instance.get(`posts`)\r\n    },\r\n    getPosts(postId) {\r\n        return instance.get(`posts/${postId}`)\r\n    },\r\n    createPost(content) {\r\n        return instance.post(`posts/create`, {content})\r\n    },\r\n    deletePost(postId) {\r\n        return instance.get(`posts/${postId}/delete`)\r\n    },\r\n    actionPost(postId, action) {\r\n        return instance.post(`posts/action`, {postId, action})\r\n    }\r\n}\r\n\r\n//old methods\r\nexport function loadPosts(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = 'http://localhost:8000/api/posts/'\r\n    const responseType = 'json'\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        callback({'message': 'request was an error'}, 400)\r\n    }\r\n    xhr.send()\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport {loadPosts} from \"../../api/posts_api\";\r\n\r\n\r\nexport const PostsComponent = (props) => {\r\n    const textAreaRef = React.createRef()\r\n    const [newPosts, setNewPosts] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewPosts = [...newPosts]\r\n\r\n        tempNewPosts.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 123123\r\n        })\r\n        setNewPosts(tempNewPosts)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n        <div className=\"col-12 my-5\">\r\n            <form onSubmit={handleSubmit} action=\"\">\r\n                <textarea ref={textAreaRef} required={true} className='form-control mb-3' name=\"post\" id=\"\" rows='5'/>\r\n                <button type='submit' className='btn btn-primary'>Post</button>\r\n            </form>\r\n        </div>\r\n        <Posts newPosts={newPosts} />\r\n    </div>\r\n}\r\n\r\nconst Posts = (props) => {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newPosts].concat(postsInit)\r\n        if (final.length !== posts.length) {\r\n            setPosts(final)\r\n        }\r\n    }, [props.newPosts, posts, postsInit])\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) => {\r\n            if (status === 200) {\r\n                setPostsInit(response)\r\n            }\r\n            else {\r\n                alert('alert')\r\n            }\r\n        }\r\n        loadPosts(myCallback)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className='posts-list mt-5'>\r\n            <p>Posts:</p>\r\n            <div>\r\n                {posts.map((item, index)=>{\r\n                    return <Post\r\n                        post={item}\r\n                        className='m-5 py-5 border bg-white text-dark post'\r\n                        key={`${index}-{item.id}`}\r\n                    />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\nimport logo from \"../../logo.svg\";\r\nimport styles from './Header.module.css'\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light pb-0\">\r\n                <div className={styles.logo}>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <p className=\"navbar-brand\" >header</p>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport {PostsComponent} from \"./components/Posts/Posts\";\nimport Header from \"./components/Header/Header\";\n\n\n\nconst App = () => {\n  return (\n      <div className='App'>\n          <header id=\"pageHeader\">\n              <Header />\n          </header>\n          <div id=\"mainContent\" className='container'>\n              <PostsComponent />\n          </div>\n          <nav id=\"mainNav\">Nav</nav>\n          <div id=\"sidebar\">Sidebar</div>\n          <footer id=\"pageFooter\">Footer</footer>\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {PostsComponent} from \"./components/Posts/Posts\";\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl)\n}\nconst postsEl = document.getElementById('posts-element')\nif (postsEl) {\n    ReactDOM.render(<PostsComponent />, postsEl)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}