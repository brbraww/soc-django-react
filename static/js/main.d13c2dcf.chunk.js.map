{"version":3,"sources":["components/Posts/Post/Post.module.css","components/Posts/Posts.module.css","logo.svg","components/Header/Header.module.css","components/Header/Header.js","api/posts_api.js","components/Posts/Post/Buttons/ActionBtn.js","components/Posts/posts_api_methods.js","components/Posts/Post/ParentPost.js","components/Posts/Post/Post.js","components/Posts/PostsList.js","components/Posts/Post/PostCreate.js","components/Posts/PostsComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","styles","logo","src","alt","backendLoockup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","responseType","open","setRequestHeader","onload","response","status","onerror","e","send","ActionBtn","post","action","didPerformAction","likes","actionDisplay","display","handlerActionBackendEvent","console","log","type","onClick","event","preventDefault","post_id","apiPostAction","id","ParentPost","hideActions","PostDetailComponent","postId","useState","didLookup","setDidLookup","setPost","handleBackendLookup","alert","useEffect","Post","didRepost","actionPost","setActionPost","match","window","location","pathname","urlPostId","groups","isDetail","handlePerformAction","newPostAction","parent","repost","content","Fragment","href","PostsList","postsInit","setPostsInit","posts","setPosts","postsDidSet","setPostsDidSet","final","newPosts","concat","username","apiPostList","handleDidRepost","newPost","updatePostsInit","unshift","updateFinalPosts","map","item","index","key","PostCreate","textAreaRef","React","createRef","didPost","handleBackendUpdate","postCreate","onSubmit","newVal","current","value","ref","required","rows","PostsComponent","setNewPosts","canPost","tempNewPosts","App","Boolean","hostname","createElement","appEl","getElementById","DatasetComponent","dataset","ReactDOM","render","postsEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d13c2dcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2G2F-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postCreate\":\"Posts_postCreate__2Kx9I\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3fMln\"};","import React from 'react';\r\nimport logo from \"../../logo.svg\";\r\nimport styles from './Header.module.css'\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light pb-0\">\r\n                <div className={styles.logo}>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <p className=\"navbar-brand\" >header</p>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","function getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport function backendLoockup(method, endpoint, callback, data) {\r\n    let jsonData\r\n    if (data) {\r\n        jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `http://localhost:8000/api${endpoint}`\r\n    const csrftoken = getCookie('csrftoken')\r\n    xhr.responseType = 'json'\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader('Content-Type', 'application/json')\r\n\r\n    if (csrftoken) {\r\n        xhr.setRequestHeader('HTTP_X_REQUESTED_WITH', 'XMLHttpRequest')\r\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\r\n        xhr.setRequestHeader('X-CSRFToken', csrftoken)\r\n    }\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        callback({'message': 'request was an error'}, 400)\r\n    }\r\n    xhr.send(jsonData)\r\n}\r\n","import {apiPostAction} from \"../../posts_api_methods\";\r\nimport React from \"react\";\r\n\r\nconst ActionBtn = (props) => {\r\n    const {post, action, didPerformAction} = props\r\n    const likes = post.likes ? post.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handlerActionBackendEvent = (response, status) => {\r\n        console.log(response, status)\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiPostAction(post.id, action.type, handlerActionBackendEvent)\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${action.display}` : actionDisplay\r\n    return <button onClick={handleClick} className={className}>{display}</button>\r\n}\r\n\r\nexport default ActionBtn","import {backendLoockup} from '../../api/posts_api'\r\n\r\nexport function apiPostList(username, callback) {\r\n    let endpoint = '/posts'\r\n    if (username) {\r\n        endpoint = `/posts/?username=${username}`\r\n    }\r\n    backendLoockup('GET', endpoint, callback)\r\n}\r\n\r\nexport function apiPostCreate(content, callback) {\r\n    const data = {content}\r\n    backendLoockup('POST', '/posts/create', callback, data)\r\n}\r\n\r\nexport function apiPostAction(post_id, action, callback) {\r\n    const data = {post_id, action}\r\n    backendLoockup('POST', '/posts/action', callback, data)\r\n}\r\n\r\nexport function apiPostDetail(post_id, callback) {\r\n    backendLoockup('GET', `/posts/${post_id}`, callback)\r\n}","import styles from \"./Post.module.css\";\r\nimport React from \"react\";\r\nimport Post from \"./Post\";\r\n\r\nfunction ParentPost(props) {\r\n    const {post} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n\r\n    return (\r\n        <div className= {className + ' col-11 p-3 mx-auto border rounded ' + styles.post} id={post.id}>\r\n            <p className='mb-0 text-muted small'>Repost</p>\r\n            <Post post={post} hideActions={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ParentPost","import React, {useEffect, useState} from \"react\";\r\nimport styles from './Post.module.css'\r\nimport ActionBtn from \"./Buttons/ActionBtn\";\r\nimport ParentPost from \"./ParentPost\";\r\nimport {apiPostDetail} from \"../posts_api_methods\";\r\n\r\n\r\nexport const PostDetailComponent = (props) => {\r\n    const {postId} = props\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [post, setPost] = useState(null)\r\n\r\n    const handleBackendLookup = (response, status) => {\r\n        if (status === 200) {\r\n            setPost(response)\r\n        } else {\r\n            alert('there was an error finding your post')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (didLookup === false) {\r\n            apiPostDetail(postId, handleBackendLookup)\r\n            setDidLookup(true)\r\n        }\r\n\r\n    }, [postId, didLookup, setDidLookup])\r\n\r\n    return post === null ? null : <Post post={post} className={props.className} />\r\n}\r\n\r\n\r\nconst Post = (props) => {\r\n    const {post, didRepost} = props\r\n    const [actionPost, setActionPost] = useState(props.post ? props.post : null)\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n\r\n    const path = window.location.pathname\r\n    const match = path.match(/(?<id>\\d+)/)\r\n    const urlPostId = match ? match.groups.id : -1\r\n\r\n    const isDetail = `${post.id}` === `${urlPostId}`\r\n\r\n    const handlePerformAction = (newPostAction, status) => {\r\n        if (status === 200) {\r\n            setActionPost(newPostAction)\r\n        } else if (status === 201) {\r\n            if (didRepost) {\r\n                didRepost(newPostAction)\r\n            }\r\n        }\r\n    }\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${post.id}`\r\n\r\n    }\r\n\r\n    return (\r\n        <div className= {className + ' ' + styles.post} id={post.id}>\r\n            <div className='content'>\r\n                {post.parent && <div><ParentPost className={props.className+' '+styles.repost} post={post.parent} /></div>}\r\n                <p>{post.id} - {post.content}</p>\r\n            </div>\r\n            <div className={'btn btn-group'}>\r\n                {(actionPost && props.hideActions !== true) && <React.Fragment>\r\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type:'like', display: 'Like'}}/>\r\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type:'unlike', display: 'Unlike'}}/>\r\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type:'repost', display: 'Share'}}/>\r\n                 </React.Fragment>\r\n                }\r\n                {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {useEffect, useState} from \"react\";\r\nimport {apiPostList} from \"./posts_api_methods\";\r\nimport Post from \"./Post/Post\";\r\n\r\nconst PostsList = (props) => {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n    const [postsDidSet, setPostsDidSet] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newPosts].concat(postsInit)\r\n        if (final.length !== posts.length) {\r\n            setPosts(final)\r\n        }\r\n    }, [props.newPosts, posts, postsInit])\r\n\r\n    useEffect(() => {\r\n        if (postsDidSet === false) {\r\n            const handlePostListLookup = (response, status) => {\r\n                if (status === 200) {\r\n                    setPostsInit(response)\r\n                    setPostsDidSet(true)\r\n                } else {\r\n                    alert('alert')\r\n                }\r\n            }\r\n            apiPostList(props.username, handlePostListLookup)\r\n        }\r\n    }, [postsInit, postsDidSet, setPostsDidSet, props.username])\r\n\r\n    const handleDidRepost = (newPost) => {\r\n        const updatePostsInit = [...postsInit]\r\n        updatePostsInit.unshift(newPost)\r\n        setPostsInit(updatePostsInit)\r\n        const updateFinalPosts = [...posts]\r\n        updateFinalPosts.unshift(posts)\r\n        setPosts(updateFinalPosts)\r\n    }\r\n\r\n    return (\r\n        <div className='posts-list mt-5'>\r\n            <p>Posts:</p>\r\n            <div>\r\n                {posts.map((item, index)=>{\r\n                    return <Post\r\n                        post={item}\r\n                        didRepost={handleDidRepost}\r\n                        className='my-5 mx-auto py-5 border bg-white text-dark'\r\n                        key={`${index}-{item.id}`}\r\n                    />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsList","import React from \"react\";\r\nimport {apiPostCreate} from \"../posts_api_methods\";\r\nimport styles from \"../Posts.module.css\";\r\n\r\nconst PostCreate = (props) => {\r\n    const textAreaRef = React.createRef()\r\n    const {didPost} = props\r\n\r\n    const handleBackendUpdate = (response, status) => {\r\n        if (status === 201) {\r\n            didPost(response)\r\n        } else {\r\n            console.log(response)\r\n            alert('An error occured. Please try again')\r\n        }\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        apiPostCreate(newVal, handleBackendUpdate)\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    return <div className={\"col-12 my-5 \" + styles.postCreate}>\r\n        <form onSubmit={handleSubmit} action=\"\">\r\n            <textarea ref={textAreaRef} required={true} className='form-control mb-3' name=\"post\" id=\"\" rows='5'/>\r\n            <button type='submit' className='btn btn-primary'>Post</button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default PostCreate","import React, {useState} from \"react\";\r\nimport styles from './Posts.module.css'\r\nimport PostsList from \"./PostsList\";\r\nimport PostCreate from \"./Post/PostCreate\";\r\n\r\n\r\nconst PostsComponent = (props) => {\r\n    const [newPosts, setNewPosts] = useState([])\r\n    const canPost = props.canPost === 'false' ? false : true\r\n\r\n    const handleNewPost = (newPost) => {\r\n        let tempNewPosts = [...newPosts]\r\n        tempNewPosts.unshift(newPost)\r\n        setNewPosts(tempNewPosts)\r\n    }\r\n\r\n    return <div className={props.className}>\r\n        {canPost === true && <PostCreate didPost={handleNewPost} className={\"col-12 my-5 \" + styles.postCreate} />}\r\n        <PostsList newPosts={newPosts} {...props} />\r\n    </div>\r\n}\r\n\r\n\r\nexport default PostsComponent;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport PostsComponent from \"./components/Posts/PostsComponent\";\r\n\r\n\r\n\r\nconst App = (props) => {\r\n    return (\r\n        <div className='App'>\r\n            <header id=\"pageHeader\">\r\n                <Header />\r\n            </header>\r\n            <div id=\"mainContent\" className='container-fluid'>\r\n                <PostsComponent />\r\n            </div>\r\n            <nav id=\"mainNav\">Nav</nav>\r\n            <div id=\"sidebar\">Sidebar</div>\r\n            <footer id=\"pageFooter\">Footer</footer>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport PostsComponent from \"./components/Posts/PostsComponent\";\r\nimport {PostDetailComponent} from \"./components/Posts/Post/Post\";\r\n\r\n\r\nconst e = React.createElement\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nconst appEl = document.getElementById('root')\r\nif (appEl) {\r\n    const DatasetComponent = e(App, appEl.dataset)\r\n    ReactDOM.render(DatasetComponent, appEl)\r\n}\r\nconst postsEl = document.getElementById('posts-element')\r\nif (postsEl) {\r\n    const DatasetComponent = e(PostsComponent, postsEl.dataset)\r\n    ReactDOM.render(DatasetComponent, postsEl)\r\n}\r\nconst postDetailElements = document.querySelectorAll('.post-detail-element')\r\npostDetailElements.forEach(container=>{\r\n    ReactDOM.render(e(PostDetailComponent, container.dataset), container)\r\n})\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}